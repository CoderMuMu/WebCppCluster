// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/general.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fgeneral_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fgeneral_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fgeneral_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fgeneral_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fgeneral_2eproto;
class Mail;
class MailDefaultTypeInternal;
extern MailDefaultTypeInternal _Mail_default_instance_;
class Sign;
class SignDefaultTypeInternal;
extern SignDefaultTypeInternal _Sign_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Mail* Arena::CreateMaybeMessage<::Mail>(Arena*);
template<> ::Sign* Arena::CreateMaybeMessage<::Sign>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Sign PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sign) */ {
 public:
  inline Sign() : Sign(nullptr) {};
  virtual ~Sign();

  Sign(const Sign& from);
  Sign(Sign&& from) noexcept
    : Sign() {
    *this = ::std::move(from);
  }

  inline Sign& operator=(const Sign& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sign& operator=(Sign&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sign* internal_default_instance() {
    return reinterpret_cast<const Sign*>(
               &_Sign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sign& a, Sign& b) {
    a.Swap(&b);
  }
  inline void Swap(Sign* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sign* New() const final {
    return CreateMaybeMessage<Sign>(nullptr);
  }

  Sign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sign& from);
  void MergeFrom(const Sign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sign";
  }
  protected:
  explicit Sign(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fgeneral_2eproto);
    return ::descriptor_table_proto_2fgeneral_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 3,
    kUseridFieldNumber = 1,
    kSigntypeFieldNumber = 2,
  };
  // string date = 3;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_date(
      std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // int64 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 signtype = 2;
  void clear_signtype();
  ::PROTOBUF_NAMESPACE_ID::int32 signtype() const;
  void set_signtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signtype() const;
  void _internal_set_signtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Sign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 signtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fgeneral_2eproto;
};
// -------------------------------------------------------------------

class Mail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mail) */ {
 public:
  inline Mail() : Mail(nullptr) {};
  virtual ~Mail();

  Mail(const Mail& from);
  Mail(Mail&& from) noexcept
    : Mail() {
    *this = ::std::move(from);
  }

  inline Mail& operator=(const Mail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail& operator=(Mail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mail* internal_default_instance() {
    return reinterpret_cast<const Mail*>(
               &_Mail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mail& a, Mail& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mail* New() const final {
    return CreateMaybeMessage<Mail>(nullptr);
  }

  Mail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mail& from);
  void MergeFrom(const Mail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mail";
  }
  protected:
  explicit Mail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fgeneral_2eproto);
    return ::descriptor_table_proto_2fgeneral_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kTitleFieldNumber = 2,
    kContextFieldNumber = 3,
    kAttachFieldNumber = 5,
    kButtontextFieldNumber = 6,
    kFromuseridFieldNumber = 7,
    kTypeFieldNumber = 4,
  };
  // repeated int64 userid = 1;
  int userid_size() const;
  private:
  int _internal_userid_size() const;
  public:
  void clear_userid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_userid() const;
  void _internal_add_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_userid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 userid(int index) const;
  void set_userid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      userid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_userid();

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string context = 3;
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_context();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_context(
      std::string* context);
  private:
  const std::string& _internal_context() const;
  void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // string attach = 5;
  void clear_attach();
  const std::string& attach() const;
  void set_attach(const std::string& value);
  void set_attach(std::string&& value);
  void set_attach(const char* value);
  void set_attach(const char* value, size_t size);
  std::string* mutable_attach();
  std::string* release_attach();
  void set_allocated_attach(std::string* attach);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_attach();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attach(
      std::string* attach);
  private:
  const std::string& _internal_attach() const;
  void _internal_set_attach(const std::string& value);
  std::string* _internal_mutable_attach();
  public:

  // string buttontext = 6;
  void clear_buttontext();
  const std::string& buttontext() const;
  void set_buttontext(const std::string& value);
  void set_buttontext(std::string&& value);
  void set_buttontext(const char* value);
  void set_buttontext(const char* value, size_t size);
  std::string* mutable_buttontext();
  std::string* release_buttontext();
  void set_allocated_buttontext(std::string* buttontext);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_buttontext();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buttontext(
      std::string* buttontext);
  private:
  const std::string& _internal_buttontext() const;
  void _internal_set_buttontext(const std::string& value);
  std::string* _internal_mutable_buttontext();
  public:

  // int64 fromuserid = 7;
  void clear_fromuserid();
  ::PROTOBUF_NAMESPACE_ID::int64 fromuserid() const;
  void set_fromuserid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fromuserid() const;
  void _internal_set_fromuserid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > userid_;
  mutable std::atomic<int> _userid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buttontext_;
  ::PROTOBUF_NAMESPACE_ID::int64 fromuserid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fgeneral_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sign

// int64 userid = 1;
inline void Sign::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sign::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sign::userid() const {
  // @@protoc_insertion_point(field_get:Sign.userid)
  return _internal_userid();
}
inline void Sign::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void Sign::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Sign.userid)
}

// int32 signtype = 2;
inline void Sign::clear_signtype() {
  signtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sign::_internal_signtype() const {
  return signtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sign::signtype() const {
  // @@protoc_insertion_point(field_get:Sign.signtype)
  return _internal_signtype();
}
inline void Sign::_internal_set_signtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  signtype_ = value;
}
inline void Sign::set_signtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signtype(value);
  // @@protoc_insertion_point(field_set:Sign.signtype)
}

// string date = 3;
inline void Sign::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Sign::date() const {
  // @@protoc_insertion_point(field_get:Sign.date)
  return _internal_date();
}
inline void Sign::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:Sign.date)
}
inline std::string* Sign::mutable_date() {
  // @@protoc_insertion_point(field_mutable:Sign.date)
  return _internal_mutable_date();
}
inline const std::string& Sign::_internal_date() const {
  return date_.Get();
}
inline void Sign::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Sign::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Sign.date)
}
inline void Sign::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Sign.date)
}
inline void Sign::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Sign.date)
}
inline std::string* Sign::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Sign::release_date() {
  // @@protoc_insertion_point(field_release:Sign.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Sign::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Sign.date)
}
inline std::string* Sign::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Sign.date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Sign::unsafe_arena_set_allocated_date(
    std::string* date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (date != nullptr) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Sign.date)
}

// -------------------------------------------------------------------

// Mail

// repeated int64 userid = 1;
inline int Mail::_internal_userid_size() const {
  return userid_.size();
}
inline int Mail::userid_size() const {
  return _internal_userid_size();
}
inline void Mail::clear_userid() {
  userid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Mail::_internal_userid(int index) const {
  return userid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Mail::userid(int index) const {
  // @@protoc_insertion_point(field_get:Mail.userid)
  return _internal_userid(index);
}
inline void Mail::set_userid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  userid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mail.userid)
}
inline void Mail::_internal_add_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  userid_.Add(value);
}
inline void Mail::add_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_userid(value);
  // @@protoc_insertion_point(field_add:Mail.userid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Mail::_internal_userid() const {
  return userid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Mail::userid() const {
  // @@protoc_insertion_point(field_list:Mail.userid)
  return _internal_userid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Mail::_internal_mutable_userid() {
  return &userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Mail::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:Mail.userid)
  return _internal_mutable_userid();
}

// string title = 2;
inline void Mail::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mail::title() const {
  // @@protoc_insertion_point(field_get:Mail.title)
  return _internal_title();
}
inline void Mail::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:Mail.title)
}
inline std::string* Mail::mutable_title() {
  // @@protoc_insertion_point(field_mutable:Mail.title)
  return _internal_mutable_title();
}
inline const std::string& Mail::_internal_title() const {
  return title_.Get();
}
inline void Mail::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mail::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mail.title)
}
inline void Mail::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Mail.title)
}
inline void Mail::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mail.title)
}
inline std::string* Mail::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mail::release_title() {
  // @@protoc_insertion_point(field_release:Mail.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mail::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mail.title)
}
inline std::string* Mail::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Mail.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mail::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Mail.title)
}

// string context = 3;
inline void Mail::clear_context() {
  context_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mail::context() const {
  // @@protoc_insertion_point(field_get:Mail.context)
  return _internal_context();
}
inline void Mail::set_context(const std::string& value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:Mail.context)
}
inline std::string* Mail::mutable_context() {
  // @@protoc_insertion_point(field_mutable:Mail.context)
  return _internal_mutable_context();
}
inline const std::string& Mail::_internal_context() const {
  return context_.Get();
}
inline void Mail::_internal_set_context(const std::string& value) {
  
  context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mail::set_context(std::string&& value) {
  
  context_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mail.context)
}
inline void Mail::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Mail.context)
}
inline void Mail::set_context(const char* value,
    size_t size) {
  
  context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mail.context)
}
inline std::string* Mail::_internal_mutable_context() {
  
  return context_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mail::release_context() {
  // @@protoc_insertion_point(field_release:Mail.context)
  return context_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mail::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mail.context)
}
inline std::string* Mail::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Mail.context)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return context_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mail::unsafe_arena_set_allocated_context(
    std::string* context) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (context != nullptr) {
    
  } else {
    
  }
  context_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      context, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Mail.context)
}

// int32 type = 4;
inline void Mail::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mail::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mail::type() const {
  // @@protoc_insertion_point(field_get:Mail.type)
  return _internal_type();
}
inline void Mail::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Mail::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Mail.type)
}

// string attach = 5;
inline void Mail::clear_attach() {
  attach_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mail::attach() const {
  // @@protoc_insertion_point(field_get:Mail.attach)
  return _internal_attach();
}
inline void Mail::set_attach(const std::string& value) {
  _internal_set_attach(value);
  // @@protoc_insertion_point(field_set:Mail.attach)
}
inline std::string* Mail::mutable_attach() {
  // @@protoc_insertion_point(field_mutable:Mail.attach)
  return _internal_mutable_attach();
}
inline const std::string& Mail::_internal_attach() const {
  return attach_.Get();
}
inline void Mail::_internal_set_attach(const std::string& value) {
  
  attach_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mail::set_attach(std::string&& value) {
  
  attach_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mail.attach)
}
inline void Mail::set_attach(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Mail.attach)
}
inline void Mail::set_attach(const char* value,
    size_t size) {
  
  attach_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mail.attach)
}
inline std::string* Mail::_internal_mutable_attach() {
  
  return attach_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mail::release_attach() {
  // @@protoc_insertion_point(field_release:Mail.attach)
  return attach_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mail::set_allocated_attach(std::string* attach) {
  if (attach != nullptr) {
    
  } else {
    
  }
  attach_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mail.attach)
}
inline std::string* Mail::unsafe_arena_release_attach() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Mail.attach)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return attach_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mail::unsafe_arena_set_allocated_attach(
    std::string* attach) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (attach != nullptr) {
    
  } else {
    
  }
  attach_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      attach, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Mail.attach)
}

// string buttontext = 6;
inline void Mail::clear_buttontext() {
  buttontext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mail::buttontext() const {
  // @@protoc_insertion_point(field_get:Mail.buttontext)
  return _internal_buttontext();
}
inline void Mail::set_buttontext(const std::string& value) {
  _internal_set_buttontext(value);
  // @@protoc_insertion_point(field_set:Mail.buttontext)
}
inline std::string* Mail::mutable_buttontext() {
  // @@protoc_insertion_point(field_mutable:Mail.buttontext)
  return _internal_mutable_buttontext();
}
inline const std::string& Mail::_internal_buttontext() const {
  return buttontext_.Get();
}
inline void Mail::_internal_set_buttontext(const std::string& value) {
  
  buttontext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mail::set_buttontext(std::string&& value) {
  
  buttontext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Mail.buttontext)
}
inline void Mail::set_buttontext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buttontext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Mail.buttontext)
}
inline void Mail::set_buttontext(const char* value,
    size_t size) {
  
  buttontext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Mail.buttontext)
}
inline std::string* Mail::_internal_mutable_buttontext() {
  
  return buttontext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mail::release_buttontext() {
  // @@protoc_insertion_point(field_release:Mail.buttontext)
  return buttontext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mail::set_allocated_buttontext(std::string* buttontext) {
  if (buttontext != nullptr) {
    
  } else {
    
  }
  buttontext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buttontext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Mail.buttontext)
}
inline std::string* Mail::unsafe_arena_release_buttontext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Mail.buttontext)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return buttontext_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mail::unsafe_arena_set_allocated_buttontext(
    std::string* buttontext) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (buttontext != nullptr) {
    
  } else {
    
  }
  buttontext_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      buttontext, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Mail.buttontext)
}

// int64 fromuserid = 7;
inline void Mail::clear_fromuserid() {
  fromuserid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Mail::_internal_fromuserid() const {
  return fromuserid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Mail::fromuserid() const {
  // @@protoc_insertion_point(field_get:Mail.fromuserid)
  return _internal_fromuserid();
}
inline void Mail::_internal_set_fromuserid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fromuserid_ = value;
}
inline void Mail::set_fromuserid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fromuserid(value);
  // @@protoc_insertion_point(field_set:Mail.fromuserid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fgeneral_2eproto
